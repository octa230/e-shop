{"ast":null,"code":"var _jsxFileName = \"/home/octa/Desktop/fullwebsite/frontend/src/Store.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Store = /*#__PURE__*/createContext();\nconst initialState = {\n  cart: {\n    cartItems: []\n  }\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'CART_ADD_ITEM':\n      //ADD TO CART\n      const newItem = action.payload;\n      const existItem = state.cart.cartItems.find(item => item._id === newItem._id);\n      const cartItems = existItem ? state.cart.cartItems.map(item => item._id === existItem._id ? newItem : item) : [...state.cart.cartItems, newItem];\n      localStorage.setItem('cartItems');\n      return { ...state,\n        cart: { ...state.cart,\n          cartItems\n        }\n      };\n\n    case 'CART_REMOVE_ITEM':\n      {\n        const cartItems = state.cart.cartItems.filter(item => item._id !== action.payload._id);\n        return { ...state,\n          cart: { ...state.cart,\n            cartItems\n          }\n        };\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport function StoreProvider(props) {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const value = {\n    state,\n    dispatch\n  };\n  return /*#__PURE__*/_jsxDEV(Store.Provider, {\n    value: value,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 12\n  }, this);\n}\n\n_s(StoreProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = StoreProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"StoreProvider\");","map":{"version":3,"sources":["/home/octa/Desktop/fullwebsite/frontend/src/Store.js"],"names":["createContext","useReducer","Store","initialState","cart","cartItems","reducer","state","action","type","newItem","payload","existItem","find","item","_id","map","localStorage","setItem","filter","StoreProvider","props","dispatch","value","children"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C;;AAEA,OAAO,MAAMC,KAAK,gBAAGF,aAAa,EAA3B;AACP,MAAMG,YAAY,GAAE;AAChBC,EAAAA,IAAI,EAAE;AACFC,IAAAA,SAAS,EAAC;AADR;AADU,CAApB;;AAMA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC5B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,eAAL;AACI;AAEA,YAAMC,OAAO,GAAGF,MAAM,CAACG,OAAvB;AACA,YAAMC,SAAS,GAAGL,KAAK,CAACH,IAAN,CAAWC,SAAX,CAAqBQ,IAArB,CACbC,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaL,OAAO,CAACK,GADjB,CAAlB;AAIA,YAAMV,SAAS,GAAGO,SAAS,GACzBL,KAAK,CAACH,IAAN,CAAWC,SAAX,CAAqBW,GAArB,CAA0BF,IAAD,IAC3BA,IAAI,CAACC,GAAL,KAAaH,SAAS,CAACG,GAAvB,GACEL,OADF,GACWI,IAFT,CADyB,GAGR,CAAC,GAAGP,KAAK,CAACH,IAAN,CAAWC,SAAf,EAA0BK,OAA1B,CAHnB;AAKAO,MAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB;AAEA,aAAO,EAAC,GAAGX,KAAJ;AAAWH,QAAAA,IAAI,EAAE,EAAC,GAAGG,KAAK,CAACH,IAAV;AAAgBC,UAAAA;AAAhB;AAAjB,OAAP;;AACA,SAAK,kBAAL;AAAyB;AACrB,cAAMA,SAAS,GAAGE,KAAK,CAACH,IAAN,CAAWC,SAAX,CAAqBc,MAArB,CACbL,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaP,MAAM,CAACG,OAAP,CAAeI,GADxB,CAAlB;AAGA,eAAO,EAAC,GAAGR,KAAJ;AAAWH,UAAAA,IAAI,EAAE,EAAC,GAAGG,KAAK,CAACH,IAAV;AAAgBC,YAAAA;AAAhB;AAAjB,SAAP;AACH;;AAEL;AACI,aAAOE,KAAP;AAzBR;AA2BH;;AAGD,OAAO,SAASa,aAAT,CAAuBC,KAAvB,EAA8B;AAAA;;AACjC,QAAM,CAACd,KAAD,EAAQe,QAAR,IAAoBrB,UAAU,CAACK,OAAD,EAAUH,YAAV,CAApC;AACA,QAAMoB,KAAK,GAAG;AAAEhB,IAAAA,KAAF;AAASe,IAAAA;AAAT,GAAd;AACA,sBAAO,QAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,KAAK,EAAEC,KAAvB;AAAA,cAA+BF,KAAK,CAACG;AAArC;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;GAJeJ,a;;KAAAA,a","sourcesContent":["import { createContext, useReducer } from \"react\";\n\nexport const Store = createContext();\nconst initialState ={\n    cart: {\n        cartItems:[],\n    },\n};\n\nfunction reducer(state, action) {\n    switch(action.type){\n        case 'CART_ADD_ITEM':\n            //ADD TO CART\n\n            const newItem = action.payload;\n            const existItem = state.cart.cartItems.find(\n                (item) => item._id === newItem._id\n            );\n\n            const cartItems = existItem \n            ? state.cart.cartItems.map((item) => \n            item._id === existItem._id \n            ? newItem: item) : [...state.cart.cartItems, newItem];\n\n            localStorage.setItem('cartItems')\n\n            return {...state, cart: {...state.cart, cartItems }};\n            case 'CART_REMOVE_ITEM': {\n                const cartItems = state.cart.cartItems.filter(\n                    (item) => item._id !== action.payload._id\n                );\n                return {...state, cart: {...state.cart, cartItems }};\n            }\n \n        default:\n            return state;\n    }\n}\n\n\nexport function StoreProvider(props) {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const value = { state, dispatch};\n    return <Store.Provider value={value}>{props.children}</Store.Provider>\n}"]},"metadata":{},"sourceType":"module"}